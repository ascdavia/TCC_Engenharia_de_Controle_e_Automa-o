{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMIUCt9EdzUgKYGAD7tUzvU"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["pip install pretty_confusion_matrix"],"metadata":{"id":"ijRKDBJoBF_B"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"0xT5tradBADP"},"outputs":[],"source":["from IPython.core.display import Pretty\n","#Data\n","import pandas as pd\n","import numpy as np\n","\n","#Wavelet Transform\n","import pywt\n","\n","#Train and Test Split\n","from sklearn.model_selection import train_test_split\n","\n","#CNN and LSTM Model\n","import keras\n","from keras.models import Sequential, Model\n","from tensorflow.keras.optimizers import Adam\n","from keras.layers import Conv1D, LSTM, Input, MaxPool1D, MaxPooling1D, Dropout, AvgPool1D, Reshape, Concatenate, Dense, Flatten\n","\n","#Metrics\n","from sklearn.metrics import confusion_matrix, recall_score, precision_score\n","\n","#Visualization\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","#from pretty_confusion_matrix import pp_matrix\n","from keras.utils.vis_utils import plot_model"]},{"cell_type":"code","source":["#Import Data\n","x1 = pd.read_csv('https://github.com/ascdavia/TCC_Engenharia_de_Controle_e_Automacao/blob/main/Database/sEMG_Basic_Hand_movements_upatras_csv_files/Database_1/df1_mov_all.csv?raw=true', compression = None)\n","x = x1.drop(x1.columns[0], axis=1)"],"metadata":{"id":"S-WZxa6DBDDT"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Reshape\n","x = x.values.reshape(x.shape[0], x.shape[1], 1)"],"metadata":{"id":"gr2CVE9aBDJA"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Labels\n","base = np.ones((150,1), dtype=np.int64)\n","m_cyl = base*0\n","m_hook = base*1\n","m_lat = base*2\n","m_palm = base*3\n","m_spher = base*4\n","m_tip = base*5"],"metadata":{"id":"Eto5AIjqBDOR"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["y = np.vstack([m_cyl,m_hook,m_lat,m_palm,m_spher,m_tip])\n","#y = pd.DataFrame(y)"],"metadata":{"id":"UPto-vPABDTh"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Train, test and validation split\n","x_train, x_aux, y_train, y_aux = train_test_split(x,y, test_size=0.30, random_state=42)\n","x_val, x_test, y_val, y_test = train_test_split(x_aux, y_aux, test_size=0.50, random_state=23)"],"metadata":{"id":"TH4DaBKNBDYS"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#LSTM Model\n","\n","lstm_size = 6\n","lstm_layers = 1\n","lr = 0.0001\n","batch_size = 100\n","seq_len = 3000\n","epochs = 150\n","\n","n_classes = 6\n","n_channels = 1\n","\n","opt = Adam(learning_rate=lr)\n","\n","lstm_model = Sequential()\n","lstm_model.add(LSTM(lstm_size, input_shape=(seq_len, n_channels), return_sequences=True))\n","lstm_model.add(LSTM(lstm_size, return_sequences=True))\n","lstm_model.add(Flatten())\n","lstm_model.add(Dense(n_classes, activation='softmax'))\n","#lstm_model.add(Dropout(0.2))\n","lstm_model.compile(loss='sparse_categorical_crossentropy', optimizer=opt, metrics=['accuracy'])\n","\n","plot_model(lstm_model, to_file='model.png')"],"metadata":{"id":"qpvT1xvEBDdx"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(lstm_model.summary())"],"metadata":{"id":"JFhVX1v9zqYz"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Fit LSTM Model\n","\n","lstm_model.fit(x_train, y_train,\n","  epochs=epochs,\n","  batch_size=batch_size,\n","  verbose=True,\n","  validation_data=(x_val, y_val))"],"metadata":{"id":"aAthzl11BDjL"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["avaliacao1 = lstm_model.evaluate(x_train,y_train)"],"metadata":{"id":"orfoWHMFBDoI"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["pred1 = lstm_model.predict(x_test)\n","y_pred1 = pred1.argmax(axis=-1)"],"metadata":{"id":"xiKWDtUUBDto"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["cm1 = confusion_matrix(y_test, y_pred1)\n","print(cm1)"],"metadata":{"id":"MArMBasEBDyp"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["qualidade1 = cm1.diagonal()/cm1.sum(axis=1)\n","desvio1 = np.std(qualidade1)\n","print('Qualidade:', qualidade1)\n","print('Desvio:', desvio1)"],"metadata":{"id":"81UfE8iBBD3o"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df_cm1 = pd.DataFrame(cm1, range(6),range(6))\n","pp_matrix(df_cm1)"],"metadata":{"id":"4qP8u0fMBD8q"},"execution_count":null,"outputs":[]}]}